#version 450
#extension GL_EXT_nonuniform_qualifier : enable
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform PushConstants {
    mat4 localToWorldA;
    mat4 localToWorldB;
} pc;

// Vertex buffer for object A (e.g., ray edges)
layout(binding = 0) buffer VertexBufferA {
    vec3 vertices[];
} vertexBufferA;

// Index buffer for object A (triplets define triangle faces)
layout(binding = 1) buffer IndexBufferA {
    uint indices[];
} indexBufferA;

// Vertex buffer for object B (triangles)
layout(binding = 2) buffer VertexBufferB {
    vec3 vertices[];
} vertexBufferB;

// Index buffer for object B
layout(binding = 3) buffer IndexBufferB {
    uint indices[];
} indexBufferB;

// Output buffer
layout(binding = 4) buffer Results {
    vec4 intersectionInfo[]; // Contains both collision positions and collision normals
} results;

bool RayTriangleIntersect(vec3 ro, vec3 rd, vec3 v0, vec3 v1, vec3 v2, out vec3 intersection) {
    vec3 e1 = v1 - v0;
    vec3 e2 = v2 - v0;
    vec3 h = cross(rd, e2);
    float a = dot(e1, h);
    if (abs(a) < 0.0001) return false;

    float f = 1.0 / a;
    vec3 s = ro - v0;
    float u = f * dot(s, h);
    if (u < 0.0 || u > 1.0) return false;

    vec3 q = cross(s, e1);
    float v = f * dot(rd, q);
    if (v < 0.0 || u + v > 1.0) return false;

    float t = f * dot(e2, q);
    if (t > 0.0 && t < 1.0) {
        intersection = ro + rd * t;
        return true;
    }
    return false;
}

void main() {
    uint triIdxA = gl_GlobalInvocationID.x;
    uint faceCountA = indexBufferA.indices.length() / 3;
    results.intersectionInfo[triIdxA] = vec4(-1.0); // position default
    results.intersectionInfo[triIdxA + faceCountA] = vec4(0.0, 0.0, 0.0, -1.0); // normal default, w = no hit

    uint idxA = triIdxA * 3;
    if (idxA + 2 >= indexBufferA.indices.length()) return;

    // Initialize output
    results.intersectionInfo[triIdxA] = vec4(-1.0, -1.0, -1.0, -1.0);
    results.intersectionInfo[triIdxA + faceCountA] = vec4(-1.0, -1.0, -1.0, -1.0);

    // Get indices for triangle A
    uint i0 = indexBufferA.indices[idxA + 0];
    uint i1 = indexBufferA.indices[idxA + 1];
    uint i2 = indexBufferA.indices[idxA + 2];

    // Load vertices and transform to world space
    vec3 a0 = (pc.localToWorldA * vec4(vertexBufferA.vertices[i0], 1.0)).xyz;
    vec3 a1 = (pc.localToWorldA * vec4(vertexBufferA.vertices[i1], 1.0)).xyz;
    vec3 a2 = (pc.localToWorldA * vec4(vertexBufferA.vertices[i2], 1.0)).xyz;

    vec3 intersection;
    bool intersectionFound = false;

    uint faceCountB = indexBufferB.indices.length() / 3;

    for (uint faceIdx = 0; faceIdx < faceCountB && !intersectionFound; faceIdx++) {
        uint idxB = faceIdx * 3;

        // Bounds check for safety
        if (idxB + 2 >= indexBufferB.indices.length()) break;

        uint j0 = indexBufferB.indices[idxB + 0];
        uint j1 = indexBufferB.indices[idxB + 1];
        uint j2 = indexBufferB.indices[idxB + 2];

        vec3 b0 = (pc.localToWorldB * vec4(vertexBufferB.vertices[j0], 1.0)).xyz;
        vec3 b1 = (pc.localToWorldB * vec4(vertexBufferB.vertices[j1], 1.0)).xyz;
        vec3 b2 = (pc.localToWorldB * vec4(vertexBufferB.vertices[j2], 1.0)).xyz;

        if (RayTriangleIntersect(a0, a1 - a0, b0, b1, b2, intersection) ||
            RayTriangleIntersect(a1, a2 - a1, b0, b1, b2, intersection) ||
            RayTriangleIntersect(a2, a0 - a2, b0, b1, b2, intersection)) {

            vec3 normal = normalize(cross(b1 - b0, b2 - b0));

            results.intersectionInfo[triIdxA] = vec4(intersection, 1.0); // store position
            results.intersectionInfo[triIdxA + faceCountA] = vec4(normal, 1.0); // store normal, return 0.0 as W to indicate normal is from object A
            intersectionFound = true;
        }

        if (!intersectionFound) {
            if (RayTriangleIntersect(b0, b1 - b0, a0, a1, a2, intersection) ||
                RayTriangleIntersect(b1, b2 - b1, a0, a1, a2, intersection) ||
                RayTriangleIntersect(b2, b0 - b2, a0, a1, a2, intersection)) {

                vec3 normal = normalize(cross(a1 - a0, a2 - a0));

                results.intersectionInfo[triIdxA] = vec4(intersection, 0.0); // store position
                results.intersectionInfo[triIdxA + faceCountA] = vec4(normal, 0.0); // store normal, return 0.0 as W to indicate normal is from object B
            }
        }
    }
}
