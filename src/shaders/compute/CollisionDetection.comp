#version 450
#extension GL_EXT_nonuniform_qualifier : enable
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform PushConstants {
    mat4 localToWorldA;  // Transform matrix for object A
    mat4 localToWorldB;  // Transform matrix for object B
} pc;

// Buffer containing vertices for rays (edges)
layout(binding = 0) buffer VertexBufferA { 
    vec4 vertices[];  
} bufferA;

// Buffer containing vertices for triangles
layout(binding = 1) buffer VertexBufferB { 
    vec4 vertices[];  
} bufferB;

// Output buffer for intersection points
layout(binding = 2) buffer Results { 
    vec4 intersectionPoints[];  // One result per vertex triplet from bufferA
} results;

bool RayTriangleIntersect(vec3 ro, vec3 rd, vec3 v0, vec3 v1, vec3 v2, out vec3 intersection) {
    vec3 e1 = v1 - v0;
    vec3 e2 = v2 - v0;
    vec3 h = cross(rd, e2);
    float a = dot(e1, h);
    if (abs(a) < 0.0001) return false;

    float f = 1.0 / a;
    vec3 s = ro - v0;
    float u = f * dot(s, h);
    if (u < 0.0 || u > 1.0) return false;

    vec3 q = cross(s, e1);
    float v = f * dot(rd, q);
    if (v < 0.0 || u + v > 1.0) return false;

    float t = f * dot(e2, q);
    if (t > 0.0 && t < 1.0) {
        intersection = ro + rd * t;
        return true;
    }
    return false;
}

void main() {
    uint idx = gl_GlobalInvocationID.x;
    
    // Check if index is valid (bufferA contains triplets of vertices)
    if (idx >= bufferA.vertices.length()) return;

    // Initialize output to -1 (including w component)
    results.intersectionPoints[idx] = vec4(-1.0, -1.0, -1.0, -1.0);

    // Get triangle vertices from bufferA and transform to world space
    vec4 a0_full = pc.localToWorldA * bufferA.vertices[idx + 0];
    vec4 a1_full = pc.localToWorldA * bufferA.vertices[idx + 1];
    vec4 a2_full = pc.localToWorldA * bufferA.vertices[idx + 2];
    vec3 a0 = a0_full.xyz;
    vec3 a1 = a1_full.xyz;
    vec3 a2 = a2_full.xyz;

    vec3 intersection;
    bool intersectionFound = false;

    // Number of faces in bufferB (assuming triplets of vertices)
    uint faceCountB = bufferB.vertices.length() / 3;

    // Check each edge from bufferA against all faces in bufferB
    for (uint faceIdx = 0; faceIdx < faceCountB && !intersectionFound; faceIdx++) {
        // Get triangle vertices from bufferB and transform to world space
        uint bIdx = faceIdx * 3;
        vec4 b0_full = pc.localToWorldB * bufferB.vertices[bIdx + 0];
        vec4 b1_full = pc.localToWorldB * bufferB.vertices[bIdx + 1];
        vec4 b2_full = pc.localToWorldB * bufferB.vertices[bIdx + 2];
        vec3 b0 = b0_full.xyz;
        vec3 b1 = b1_full.xyz;
        vec3 b2 = b2_full.xyz;

        // Check edges from bufferA triangle against bufferB triangle
        if (RayTriangleIntersect(a0, a1 - a0, b0, b1, b2, intersection) ||
            RayTriangleIntersect(a1, a2 - a1, b0, b1, b2, intersection) ||
            RayTriangleIntersect(a2, a0 - a2, b0, b1, b2, intersection)) {
            results.intersectionPoints[gl_GlobalInvocationID.x] = vec4(intersection, 1.0); // Convert vec3 to vec4
            intersectionFound = true;
        }

        // If no intersection found, check edges from bufferB triangle against bufferA triangle
        if (!intersectionFound) {
            if (RayTriangleIntersect(b0, b1 - b0, a0, a1, a2, intersection) ||
                RayTriangleIntersect(b1, b2 - b1, a0, a1, a2, intersection) ||
                RayTriangleIntersect(b2, b0 - b2, a0, a1, a2, intersection)) {
                results.intersectionPoints[gl_GlobalInvocationID.x] = vec4(intersection, 1.0); // Convert vec3 to vec4
                intersectionFound = true;
            }
        }
    }
}